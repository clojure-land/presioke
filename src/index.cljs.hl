(page "index.html")

;;; flickr API

(defn flickr
  "Invokes the flickr API method with params and calls the success
  function."
  [method params success]
  (->> {"type" "GET"
        "url" "http://api.flickr.com/services/rest/"
        "data" (merge params {"method" method, "format" "json"})
        "jsonpCallback" "jsonFlickrApi"
        "dataType" "jsonp"
        "success" (comp success js->clj)}
       clj->js
       (.ajax js/jQuery)))

(defn image-url
  "Converts a flickr image response map into an image URL."
  [{:strs [farm server id secret]}]
  (str "http://farm" farm ".staticflickr.com/" server "/" id "_" secret ".jpg"))

;;; cells

(defc images         ["http://www.auburn.edu/~burnsma/peopl96a.gif"])
(defc cursor         0)
(defc= ready?        (> (dec (count images)) cursor))
(defc= current-image (nth images cursor))
(defc= next-image    (first (drop (inc cursor) images)))

(defc= current-image-style
  [[:background (str "url('" current-image "')")]
   [:background-size "cover"]
   [:position "fixed"]
   [:top "0"]
   [:bottom "0"]
   [:left "0"]
   [:right "0"]
   [:z-index "1"]])

;;; style maps

(defc page-marker-style
  {:z-index "2"
   :position "absolute"
   :background "rgba(0,0,0,0.5)"
   :border-radius "30px"
   :color "#fff"
   :padding "10px"})

(defc helper-text-style
  {:z-index "2"
   :position "absolute"
   :background "rgba(0,0,0,0.5)"
   :border-radius "30px"
   :color "#fff"
   :bottom "0"
   :left "0"
   :right "0"
   :text-align "center"
   :padding "10px"})

(defc prefetch-image-style
  {:display "none"
   :z-index "-1"})

;;; initialize

(.on (js/jQuery "html")
     "keyup"
     (fn [e]
       (if (= (.-keyCode e) 8)
         (swap! cursor #(if (pos? %) (dec %) %))
         (swap! cursor inc))))

(.on (js/jQuery "html") "click" #(swap! cursor inc))

(flickr "flickr.interestingness.getList"
        {"api_key" "d4fbe84122c1fb2c58dcdd974f5e46ef", "per_page" 500}
        #(swap! images concat (map image-url (get-in % ["photos" "photo"]))))

(html
 (head
   (title "Presioke"))
 (body
  (div :do-css current-image-style)
  (img :do-css prefetch-image-style
       :do-attr (cell= {:src next-image}))
  (span :do-css page-marker-style
        :do-text (cell= (if ready? (str (inc cursor) "/" (count images)) "Loading...")))
  (br)
  (span :do-css helper-text-style
        :do-text (cell= (if ready? "Press a key or click the mouse for a new image. Hit backspace to go back a slide.")))))
